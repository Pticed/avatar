require 'avatar/source/abstract_source'
require 'avatar/source/static_url_source'
require 'avatar/source/nil_source'
require 'digest/md5'

module Avatar # :nodoc:
  module Source # :nodoc:
    # NOTE: since Gravatar always returns a URL (never a 404), instances of this
    # class should only be placed at the end of a SourceChain.
    # (see link:classes/Avatar/Source/SourceChain.html)
    # Alternatively, use <code>default_source = ...</code> to generate a site-wide
    # default to be passed to Gravatar.  (In fact, since <code>default_source</code>
    # is an instance of Avatar::Source::AbstractSource, it can generate a different
    # default for each person.)
    class GravatarSource
      include AbstractSource
      
      attr_accessor :default_field
      attr_reader :default_source
      
      # 'http://www.gravatar.com/avatar/'
      def self.base_url
        'http://www.gravatar.com/avatar/'
      end
      
      # :nodoc:
      def initialize(default_source = nil, default_field = :email)
        self.default_source = default_source #not @default_source = ... b/c want to use the setter function below
        @default_field = default_field
        raise "There's a bug in the code" if @default_source.nil?
      end
      
      # Generates a Gravatar URL.  Returns nil if person is nil.
      # Options: 
      # * <code>:field (Symbol)</code> - the field to call from person.  By default, <code>:email</code>.
      # * <code>:default (String)</code> - override the default generated by <code>default_source</code>.
      # * <code>:size or :s</code> - the size in pixels of the avatar to render.
      # * <code>:rating or :r</code> - the maximum rating; one of ['G', 'PG', 'R', 'X']
      def avatar_url_for(person, options = {})
        return nil if person.nil?
        options[:default] ||= default_avatar_url_for(person, options)
        field = options[:field] || default_field
        raise ArgumentError.new('No field specified; either specify a default field or pass in a value for :field (probably :email)') unless field
        url = self.class.base_url
        url << Digest::MD5::hexdigest(person.send(field)).strip
        [:size, :s, :rating, :r, :default].each do |x|
          next unless options[x]
          url << (url.include?('?') ? '&' : '?')
          url << "#{x}=#{options[x]}"
        end
        url
      end
      
      # Set the default source for all people.
      # If +default+ is a String, it will be converted to an instance of Avatar::Source::StaticUrlSource.
      # If +default+ is nil, sets the default to a NilSource.
      def default_source=(default)
        case default
        when String
          @default_source = StaticUrlSource.new(default)
        when AbstractSource
          @default_source = default
        when NilClass
          @default_source = NilSource.new
        else
          raise ArgumentError.new("#{default} must be either a String or an instance of #{AbstractSource}")
        end
      end
      
      private
      
      def default_avatar_url_for(person, options)
        @default_source.avatar_url_for(person, options)
      end
      
    end
  end
end